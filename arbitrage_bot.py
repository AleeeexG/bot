import requests
import time
from datetime import datetime
import asyncio
import telegram
from telegram import Bot

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
SPREAD_MIN = 3.0  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ 3%
SPREAD_MAX = 50.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å–ø—Ä–µ–¥ 50% (–≤—ñ–¥—Å—ñ—é—î–º–æ –≤–µ–ª–∏–∫—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è)
VOLUME_MIN = 100000  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±'—î–º —Ç–æ—Ä–≥—ñ–≤ ($)
CHECK_INTERVAL = 30  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫
TELEGRAM_TOKEN = "  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ
CHAT_ID = "  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ

class ArbitrageBot:
    def __init__(self):
        self.active_signals = {}
        self.bot = Bot(token=TELEGRAM_TOKEN) if TELEGRAM_TOKEN and CHAT_ID else None
        self.session = requests.Session()
    
    def __del__(self):
        if hasattr(self, 'session'):
            self.session.close()

    def get_mexc_futures(self):
        """–û—Ç—Ä–∏–º—É—î —Ñ'—é—á–µ—Ä—Å–Ω—ñ –ø–∞—Ä–∏ MEXC –∑ –æ–±'—î–º–æ–º"""
        try:
            url = "https://api.mexc.com/api/v3/ticker/24hr"
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()
            return [
                (ticker['symbol'], float(ticker['quoteVolume']))
                for ticker in data 
                if ticker['symbol'].endswith('USDT') and float(ticker['quoteVolume']) >= VOLUME_MIN
            ]
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä MEXC: {e}")
            return []

    def get_dex_price(self, coin_id):
        """–¶—ñ–Ω–∞ –∑ CoinGecko"""
        try:
            url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd"
            response = self.session.get(url, timeout=10)
            response.raise_for_status()
            return response.json()[coin_id]['usd']
        except:
            return None

    def check_pair(self, symbol):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä—É –Ω–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –∫–æ–ª–∏–≤–∞–Ω—å"""
        try:
            ticker_url = f"https://api.mexc.com/api/v3/ticker/price?symbol={symbol}"
            response = self.session.get(ticker_url, timeout=5)
            response.raise_for_status()
            mexc_price = float(response.json()['price'])
            
            coin_id = symbol.lower().replace('usdt', '')
            dex_price = self.get_dex_price(coin_id)
            if not dex_price:
                return None
                
            spread = ((mexc_price - dex_price) / dex_price) * 100
            
            # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏—Ö –∫–æ–ª–∏–≤–∞–Ω—å
            if abs(spread) > SPREAD_MAX:
                print(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {symbol}: —Å–ø—Ä–µ–¥ {abs(spread):.2f}% > {SPREAD_MAX}% (–∑–∞–≤–µ–ª–∏–∫–µ –∫–æ–ª–∏–≤–∞–Ω–Ω—è)")
                return None
                
            return spread, mexc_price, dex_price
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–∏ {symbol}: {e}")
            return None

    async def send_alert(self, symbol, spread, mexc_price, dex_price, is_new=True):
        """–ù–∞–¥—Å–∏–ª–∞—î/–æ–Ω–æ–≤–ª—é—î —Å–∏–≥–Ω–∞–ª"""
        direction = "MEXC > DEX" if spread > 0 else "MEXC < DEX"
        action = "–ö—É–ø—É–π—Ç–µ –Ω–∞ DEX, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–∞ MEXC" if spread > 0 else "–ö—É–ø—É–π—Ç–µ –Ω–∞ MEXC, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–∞ DEX"
        
        msg = (
            f"\n{'üö® –ù–û–í–ò–ô –°–ò–ì–ù–ê–õ' if is_new else 'üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø'} | {datetime.now().strftime('%H:%M:%S')}\n"
            f"üìå {symbol} | {direction}\n"
            f"‚ñ™ MEXC: {mexc_price:.8f} $\n"
            f"‚ñ™ DEX:  {dex_price:.8f} $\n"
            f"üìä –°–ø—Ä–µ–¥: {abs(spread):.2f}%\n"
            f"üí° {action}"
        )
        print(msg)

        if self.bot:
            try:
                await self.bot.send_message(chat_id=CHAT_ID, text=msg)
            except Exception as e:
                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ Telegram: {e}")

    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª"""
        print(f"üîç –°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (—Å–ø—Ä–µ–¥ {SPREAD_MIN}%-{SPREAD_MAX}%, –æ–±'—î–º ‚â• ${VOLUME_MIN:,})...")
        
        while True:
            try:
                futures = self.get_mexc_futures()
                print(f"\nüîé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {len(futures)} –ø–∞—Ä | {datetime.now().strftime('%H:%M:%S')}")
                
                for symbol, volume in futures:
                    result = self.check_pair(symbol)
                    if not result:
                        continue
                        
                    spread, mexc_price, dex_price = result
                    
                    # –§—ñ–ª—å—Ç—Ä –∑–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–º —Å–ø—Ä–µ–¥–æ–º
                    if abs(spread) < SPREAD_MIN:
                        if symbol in self.active_signals:
                            print(f"‚ùå –°–ö–ê–°–û–í–ê–ù–û {symbol} | {datetime.now().strftime('%H:%M:%S')}")
                            del self.active_signals[symbol]
                        continue
                    
                    if symbol in self.active_signals:
                        prev_spread, _ = self.active_signals[symbol]
                        if abs(spread - prev_spread) > 1.0:
                            await self.send_alert(symbol, spread, mexc_price, dex_price, is_new=False)
                            self.active_signals[symbol] = (spread, spread > 0)
                    else:
                        await self.send_alert(symbol, spread, mexc_price, dex_price)
                        self.active_signals[symbol] = (spread, spread > 0)
                
                await asyncio.sleep(CHECK_INTERVAL)
            except KeyboardInterrupt:
                print("\nüõë –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
                break
            except Exception as e:
                print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
                await asyncio.sleep(60)

if __name__ == '__main__':
    bot = ArbitrageBot()
    try:
        asyncio.run(bot.run())
    finally:
        if hasattr(bot, 'session'):
            bot.session.close()
